##################################################
## In Paraview, apply as programmable filter to unstructured grid with velocity U and vector flag isValid
## Averages U along a dimension to reduce to 2D
## output: Ubar0-2 
##################################################
## Daniel Carlson
## 2022 November
## Okinawa Institute of Science and Technology
##################################################

import math
import numpy as np

from vtk.numpy_interface import algorithms as algs
#from vtk.numpy_interface import dataset_adapter as dsa

X = inputs[0].Points[:,0]
Y = inputs[0].Points[:,1]
Z = inputs[0].Points[:,2]

UPT = np.array(inputs[0].PointData["U"])
valOut = np.array(inputs[0].PointData["isValid"])

uPt = UPT[:,0]
vPt = UPT[:,1]
wPt = UPT[:,2]

xn = np.array(X)
yn = np.array(Y)
zn = np.array(Z)

UOUT = 0*xn
VOUT = 0*xn
WOUT = 0*xn
utmp = 0*xn
stepsY, countY = np.unique(yn, return_counts = True)
stepsZ, countZ = np.unique(zn, return_counts = True)


for yInd in stepsY:
    for zInd in stepsZ:

        indTmp = np.logical_and(yInd == yn/valOut, zInd == zn/valOut)

        UOUT[indTmp] = mean(uPt[indTmp])
        VOUT[indTmp] = mean(vPt[indTmp])
        WOUT[indTmp] = mean(wPt[indTmp])

output.PointData.append(UOUT, 'Ubar0')
output.PointData.append(VOUT, 'Ubar1')
output.PointData.append(WOUT, 'Ubar2')
output.PointData.append(valOut, 'valOut')
